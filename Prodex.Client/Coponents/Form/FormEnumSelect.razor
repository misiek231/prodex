@using Prodex.Client.RestClients;
@using Prodex.Shared.Forms;
@using Prodex.Shared.Pagination;
@using Prodex.Shared.Utils;
@using Blazorise.Components
@using System.Linq.Expressions;
@using System.Reflection;
@using Prodex.Utils;
@using Prodex.Client.Extensions;
@using System.ComponentModel;
@typeparam TForm where TForm : FormBaseModel
@typeparam TField where TField : Enum
@inject ApiSelectClient apiSelectClient;

<Validation Validator="(a) => Form.GetState(a, GetProp().Name)">
    <Field>
        <FieldLabel>@GetLabel()</FieldLabel>
        <Autocomplete TItem="KeyValuePair<TField, string>"
                      TValue="TField"
                      Data="@Options"
                      ValueField="@(item => item.Key)"
                      TextField="@(item => item.Value)"
                      SelectedValue="@Property.Compile()(Form)"
                      SelectedValueChanged="ValueChanged"
                      ReadData="e => LoadData(e.SearchValue)"
                      Placeholder="Wyszukaj..."
                      Validator="(a) => Form.GetState(a, GetProp().Name)"
                      Debounce="true"
                      Disabled="Disabled"
                      MinLength="0">
            <NotFoundContent> Brak wyników </NotFoundContent>
        </Autocomplete>
        <ValidationError />
    </Field>
</Validation>

@code {

    [CascadingParameter]
    public TForm Form { get; set; }

    [Parameter]
    public EventCallback OnValueChanged { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public Expression<Func<TForm, TField>> Property { get; set; }

    private Pager pager = new Pager();

    private List<KeyValuePair<TField, string>> Options { get; set; }



    protected override Task OnInitializedAsync()
    {
        LoadData("");

        return Task.CompletedTask;
    }

    private void LoadData(string search)
    {
        Options = EnumExtensions.GetValuesWithDescription<TField>().Where(p => p.Value.Contains(search)).ToList();
    }

    private async Task ValueChanged(TField newValue)
    {
        Console.WriteLine(newValue);
        Property.SetValue(Form, newValue);

        await OnValueChanged.InvokeAsync();
    }

    private string GetLabel()
    {
        if (!string.IsNullOrEmpty(Label)) return Label;

        return GetProp().GetCustomAttribute<DescriptionAttribute>()?.Description ?? "";
    }

    private PropertyInfo GetProp()
    {
        return (Property.Body as MemberExpression).Member as PropertyInfo;
    }
}
