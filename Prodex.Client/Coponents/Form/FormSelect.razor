@using Prodex.Client.RestClients;
@using Prodex.Shared.Forms;
@using Prodex.Shared.Pagination;
@using Prodex.Shared.Utils;
@using Blazorise.Components
@using System.Linq.Expressions;
@using System.Reflection;
@using Prodex.Utils;
@typeparam TForm where TForm : FormBaseModel
@typeparam TField where TField : IApiSelect, new()
@inject ApiSelectClient apiSelectClient;

<Autocomplete TItem="KeyValueResult"
                TValue="long?"
                Data="@Options"
                ValueField="@(item => item.Key)"
                TextField="@(item => item.Value)"
                SelectedValue="@Property.Compile()(Form)?.Id"
                SelectedValueChanged="ValueChanged"
                ReadData="e => LoadData(e.SearchValue)"
                Placeholder="Search..."
                Validator="(a) => Form.Status(a, GetProp().Name)"
                Debounce="true"
                MinLength="0">
    <NotFoundContent> Brak wyników </NotFoundContent>
</Autocomplete>

@code {

    [CascadingParameter]
    public TForm Form { get; set; }

    [Parameter]
    public Expression<Func<TForm, TField>> Property { get; set; }

    private Pager pager = new Pager();

    private List<KeyValueResult> Options { get; set; }
    private long value;

    protected override async Task OnInitializedAsync()
    {
        await LoadData("");
    }

    private async Task LoadData(string search)
    {
        // Options = (await DataSource(pager, search)).Items.ToList();

        var name = GetProp().PropertyType.Name.PascalToKebab();

        Options = await apiSelectClient.Get(name, pager, search);
    }

    private void ValueChanged(long? newValue)
    {
        if (!newValue.HasValue) return;

        var value = new TField();
        value.Id = newValue.Value;
        
        GetProp().SetValue(Form, value);
    }

    private PropertyInfo GetProp()
    {
        return (Property.Body as MemberExpression).Member as PropertyInfo;
    }
}
