@using Prodex.Client.Extensions
@using Prodex.Client.RestClients;
@using Prodex.Shared.Forms;
@using Prodex.Shared.Pagination;
@using Prodex.Shared.Utils;
@using Blazorise.Components
@using System.Linq.Expressions;
@using System.Reflection;
@using Prodex.Utils;
@using System.ComponentModel;
@typeparam TForm where TForm : FormBaseModel
@typeparam TField where TField : class, IApiSelect, new()
@inject ApiSelectClient apiSelectClient;

<style>
    .dropdown-menu {
        margin: 2.5rem 0 0;
    }
</style>

<Validation Validator="(a) => Form.GetState(a, GetProp().Name)">
    <Field>
        <FieldLabel>@GetLabel()</FieldLabel>
        <Autocomplete TItem="KeyValueResult"
                      TValue="long?"
                      Data="@Options"
                      ValueField="@(item => item.Key)"
                      TextField="@(item => item.Value)"
                      SelectedValue="@Property.Compile()(Form)?.Id"
                      SelectedValueChanged="ValueChanged"
                      ReadData="e => LoadData(e.SearchValue)"
                      Placeholder="Search..."
                      Validator="(a) => Form.GetState(a, GetProp().Name)"
                      Disabled="Disabled"
                      Debounce="true"
                      MinLength="0">
            <NotFoundContent> Brak wyników </NotFoundContent>
        </Autocomplete>
    </Field>
</Validation>

    @code {

    [CascadingParameter]
    public TForm Form { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public Expression<Func<TForm, TField>> Property { get; set; }

    [Parameter]
    public object AdditionalFilter { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    private Pager pager = new Pager();

    private List<KeyValueResult> Options { get; set; }

    protected override async void OnParametersSet()
    {
        await LoadData("");
        base.OnParametersSet();
    }

    private async Task LoadData(string search)
    {
        var name = GetProp().PropertyType.Name.PascalToKebab();

        Options = await apiSelectClient.Get(name, pager, search, AdditionalFilter);

        this.StateHasChanged();
    }

    private void ValueChanged(long? newValue)
    {
        if (!newValue.HasValue) return;

        var value = Activator.CreateInstance(GetProp().PropertyType) as TField;
        value.Id = newValue.Value;

        Property.SetValue(Form, value);
    }

    private string GetLabel()
    {
        if (!string.IsNullOrEmpty(Label)) return Label;

        return GetProp().GetCustomAttribute<DescriptionAttribute>()?.Description ?? "";
    }

    private PropertyInfo GetProp()
    {
        return (Property.Body as MemberExpression).Member as PropertyInfo;
    }
}
