@page "/"
@using Prodex.Client.Coponents
@using Prodex.Client.RestClients;
@using Prodex.Shared.Models.Dashboard
@using Prodex.Shared.Models.Products;
@using Prodex.Shared.Pagination;
@using Prodex.Client.Pages.Components;
@inject DashboardClient Dashboard
@inject NavigationManager Navigation

<style>
    .widget-header-0 {
        background: linear-gradient(45deg,#ffc721,#edb100)!important;
    }

    .widget-header-1 {
        background: linear-gradient(45deg,#2497bf,#105f7b) !important;
    }

    .widget-header-2 {
        background: linear-gradient(45deg,#f98483,#f75453) !important;
    }

    .widget-header-3 {
        background: linear-gradient(45deg,#31b3e0,#1d97c2) !important;
    }

    .card-header{
        color: white;
        font-weight: bold;
        text-align: center;
        padding: 25px;
        font-size: 1.5rem;
    }

    .card {
        border-radius: 0.4rem !important;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    }
</style>

<Div Class="d-flex gap-3 flex-column">
    @for (int i = 0; i < model.Widgets.Count; i++)
    {
        <ListWidget Widget="@model.Widgets[i]" HeaderColor="@GetColorNumber(i)" IsAdmin="@model.IsAdmin"/>
    }
 </Div>

@code {
    private DashboardDetailsModel model = new DashboardDetailsModel { Widgets = [] };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            model = await Dashboard.Get();
        }
        catch (HttpRequestException)
        {
            // todo: find nice way to handle exceptions like that
        }
    }

    private string GetColorNumber(int i){
        return (i % 4).ToString();
    }
}