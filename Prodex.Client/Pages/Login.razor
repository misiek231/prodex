@page "/login"
@using Blazored.LocalStorage;
@using Prodex.Client.RestClients;
@using Prodex.Client.Services.Auth;
@using Prodex.Shared.Models.Auth;
@using System.Text.Json;
@using System.Net;
@inject AuthClient Auth
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@layout AuthLayout

<Card>
    <CardBody>
        <Blazorise.ValidationSummary Errors="Err" />
        <FormWrapper Form="Form">
            <FormInput Property="p => p.Username"/>
            <FormInput Property="p => p.Password" Role="TextRole.Password"/>
        </FormWrapper>
        <Button Color="Color.Primary" @onclick="LoginClick">Zaloguj</Button>
    </CardBody>
</Card>

@code {

    private LoginModel Form = new LoginModel();
    private string[] Err; // TODO: return this message from backend

    private async Task LoginClick()
    {
        Err = null;
        var result = await Auth.Login(Form);

        if (!result.IsSuccessStatusCode)
        {
            if(result.StatusCode == HttpStatusCode.UnprocessableEntity)
                Err = new string[] { await result.Content.ReadAsStringAsync() };
            
            return;
        }

        var token = await result.Content.ReadAsStringAsync();
        await LocalStorage.SetItemAsStringAsync("token", result.Result.Token);
        ((CustomAuthenticationStateProvider)AuthProvider).NotifyAuthStateChanged();
        Navigation.NavigateTo("");
    }
}