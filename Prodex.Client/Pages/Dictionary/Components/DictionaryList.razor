@using Microsoft.AspNetCore.Authorization;
@using Prodex.Client.Coponents
@using Prodex.Client.RestClients;
@using Prodex.Shared.Models.Dictionary;
@using Prodex.Shared.Pagination;
@using Prodex.Client.Pages.Dictionary.Modals;
@inject DictionaryClient Dictionary

<Card Style="height: 100%;">
    <CardHeader Class="d-flex">
        <Button Type="ButtonType.Link" Color="Color.Primary" @onclick="createDictionaryModal.Show">Dodaj</Button>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="ListItemModel" Data="@items" ReadData="LoadData" SelectedRowChanged="m => createDictionaryModal.Show(m.Id)" Responsive>
            <DataGridColumn Field="@nameof(ListItemModel.Name)" Caption="Nazwa" />
            <DataGridColumn Field="@nameof(ListItemModel.DateCreatedUtc)" Caption="Data utworzenia" />
            <DataGridColumn Field="@nameof(ListItemModel.DateUpdatedUtc)" Caption="Data edycji" />
            <DataGridColumn Field="@nameof(ListItemModel.CreatedByNavigation)" Caption="Utworzone przez" />
            <DataGridColumn Field="@nameof(ListItemModel.UpdatedByNavigation)" Caption="Edytowane przez" />
        </DataGrid>
    </CardBody>
    <CardFooter>
        <SimplePagination Pager="pager" LoadData="LoadData" />
    </CardFooter>
</Card>

<CreateDictionaryModal @ref="createDictionaryModal" LoadData="LoadData" />

@code {

    private ModalBase createDictionaryModal;

    private List<ListItemModel> items = new List<ListItemModel>();
    private Pager pager = new Pager(1, 10);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var result = await Dictionary.Get(pager, new FilterModel());
            items = result.Items.ToList();
            pager.TotalRows = result.TotalRows;
        }
        catch (HttpRequestException)
        {
            // todo: find nice way to handle exceptions like that
        }
    }
}