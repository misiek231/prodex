@using Blazorise.Components
@using Prodex.Client.RestClients;
@using Prodex.Shared.Models.Dictionary
@using Prodex.Shared.Models.ProductTemplates.FieldsConfig
@using Prodex.Shared.Models.Products.DynamicFields;
@using Prodex.Shared.Pagination
@using Prodex.Shared.Utils
@inject FieldsDetailsClient client;
@inject DictionaryTermsClient dictClient;


<Div>
    @for(int k = 0; k < Fields.Count; k++)
    {
        int i = k;
        if(EditingField == i)
        {
            <Div Class="d-flex align-items-end">
                <FieldLabel><b>@(Fields[i].DisplayName):</b></FieldLabel>
                <Button @onclick="() => ExitEditMode(true)"><Icon Name="IconName.Save" /></Button>
                <Button @onclick="() => ExitEditMode(false)"><Icon Name="IconName.Undo" /></Button>
            </Div>

            if(Fields[i].Type == FieldType.Dictionary)
            {
                <Autocomplete TItem="KeyValueResult"
                      TValue="long?"
                      Data="@DictOptions"
                      ValueField="@(item => item.Key)"
                      TextField="@(item => item.Value)"
                      @bind-SelectedValue="EditingValueDict"
                      ReadData="LoadDict"
                      Placeholder="Search..."
                      Debounce="true"
                      MinLength="0">
                    <NotFoundContent> Brak wyników </NotFoundContent>
                </Autocomplete>
            }
            else
            {
                <TextEdit @bind-Text="EditingValue" MaskType=" Fields[i].Type == FieldType.Number ? MaskType.Numeric : MaskType.None" />
            }
        }
        else
        {

            <b>@(Fields[i].DisplayName): </b>@(Fields[i].Value ?? "-")
            <Button @onclick="() => SetEditMode(i)"><Icon Name="IconName.Edit" /></Button><br />
        }
    }
</Div>

@code {


    public List<DynamicFieldDetailsModel> Fields = new();

    public List<KeyValueResult> DictOptions = new();

    public int? EditingField { get; set; }

    [Parameter]
    public long ProductId { get; set; }

    [Parameter]
    public EventCallback Reload { get; set; }

    public string EditingValue { get; set; }
    public long? EditingValueDict { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    public async Task LoadData()
    {
        Fields = await client.Get(ProductId);
    }

    public async Task LoadDict()
    {
        if (EditingField.HasValue && Fields[EditingField.Value].Type == FieldType.Dictionary && Fields[EditingField.Value].DictionaryId.HasValue)
        {
            DictOptions = (await dictClient.Get(new Pager(), new Prodex.Shared.Models.DictionaryTerms.FilterModel { DictionaryId = Fields[EditingField.Value].DictionaryId.Value })).Items
                .Select(p => new KeyValueResult(p.Id, p.Value)).ToList();
        }
    }

    private void SetEditMode(int index)
    {
        EditingValue = Fields[index].Value;
        EditingField = index;
    }

    public async Task ExitEditMode(bool save)
    {
        if (save && EditingField.HasValue)
        {
            var form = new SetProductFieldFormModel();
            
            form.NewValue = Fields[EditingField.Value].Type == FieldType.Dictionary ? EditingValueDict.ToString() : EditingValue;

            await client.Post(ProductId, Fields[EditingField.Value].FieldConfigId, form);
            await LoadData();
        }

        EditingValue = null;
        EditingValueDict = null;
        EditingField = null;

        await Reload.InvokeAsync();
    }
}
