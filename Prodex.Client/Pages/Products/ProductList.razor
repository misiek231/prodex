@page "/product/{TemplateId:long}"
@using Microsoft.AspNetCore.Authorization;
@using Prodex.Client.Coponents
@using Prodex.Client.RestClients;
@using Prodex.Shared.Models.Products;
@using Prodex.Shared.Pagination;
@inject ProductsClient Products
@inject NavigationManager Navigation

<Card Style="height: 100%;">
    <CardHeader>
        <Button Type="ButtonType.Link" To="@($"product/{TemplateId}/add")" Color="Color.Primary">Dodaj</Button>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="ListItemModel" Data="@items" ReadData="LoadData" SelectedRowChanged="RowSelected" Responsive>
            <DataGridColumn Field="@nameof(ListItemModel.Name)" Caption="Nazwa" />
            <DataGridColumn Field="Template.Value" Caption="Szablon" />@*TODO: Remove hardcoded string, best option is to make custom Grid and pass fields as func like in forms*@
            <DataGridColumn Field="@nameof(ListItemModel.RealizingUser)" Caption="Aktualnie realizuje" />
            <DataGridColumn Field="Status.Value" Caption="Status" >
                <DisplayTemplate>
                    <Badge Color="@context.Status.Color">@context.Status.Value</Badge>
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn Field="@nameof(ListItemModel.DateCreatedUtc)" Caption="Data utworzenia"/>
            <DataGridColumn Field="@nameof(ListItemModel.DateUpdatedUtc)" Caption="Data edycji" />
            <DataGridColumn Field="@nameof(ListItemModel.CreatedByNavigation)" Caption="Utworzone przez" />
            <DataGridColumn Field="@nameof(ListItemModel.UpdatedByNavigation)" Caption="Edytowane przez" />
        </DataGrid>
    </CardBody>
    <CardFooter>
        <SimplePagination Pager="pager" LoadData="LoadData" />
    </CardFooter>
</Card>

 @code {
    private List<ListItemModel> items = new List<ListItemModel>();
    private Pager pager = new Pager(1, 50);

    [Parameter]
    public long TemplateId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        pager = new Pager(1, 50);
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var result = await Products.Get(pager, new FilterModel { TemplateId = TemplateId });
            items = result.Items.ToList();
            pager.TotalRows = result.TotalRows;
        }
        catch (HttpRequestException)
        {
            // todo: find nice way to handle exceptions like that
        }
    }

    private void RowSelected(ListItemModel item)
    {
        Navigation.NavigateTo($"product/{TemplateId}/details/{item.Id}");
    }
}