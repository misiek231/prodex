@page "/product/{TemplateId:long}/details/{Id:long}"
@using Prodex.Client.Coponents
@using Prodex.Client.Coponents.Form
@using Prodex.Client.Pages.Products.Components
@using Prodex.Client.RestClients;
@using Prodex.Shared.Models.Products;
@using System.Net;
@using Prodex.Shared.Pagination;
@using Prodex.Shared.Utils;
@inject NavigationManager Navigation
@inject ProductsClient Products

<Card>
    <CardHeader>
        @Details?.Name
    </CardHeader>
    <CardBody Class="d-flex flex-wrap gap-3">
        
        <Card Style="min-width: 20rem">
            <CardHeader>
                <b>Informacje podstawowe</b>
            </CardHeader>
            <CardBody>
                <p><b>ID: </b> @Details?.Id</p>
                <p><b>Nazwa: </b> @Details?.Name</p>
                <p><b>Szablon: </b> @Details?.Template?.Value</p>
                <p><b>Status: </b> <Badge Color="Details?.Status?.Color">@Details?.Status?.Value</Badge> </p>
            </CardBody>
        </Card>

        <Card Style="min-width: 20rem">
            <CardHeader>
                <b>Szczegóły</b>
            </CardHeader>
            <DynamicDetails ProductId="Id" />
        </Card>

        <Card Style="min-width: 30rem">
            <CardHeader>
                <b>Historia</b>
            </CardHeader>
            <CardBody>
                <HistoryList @ref="historyList" ProductId="Id" />
            </CardBody>
        </Card>

        <Card Style="min-width: 50rem">
            <CardHeader>
                <b>Proces</b>
            </CardHeader>
            <CardBody>
                <BpmnViewer @ref="modeler" />
            </CardBody>
        </Card>
    </CardBody>
    <CardFooter>
        <Div class="d-flex gap-1">
            @foreach(var button in Details?.Buttons ?? new List<ApiButton>())
            {
                <Button Color="Color.Primary" @onclick="() => ActionButtonClick(button.ActionId)">@button.Name</Button>
            }
        </Div>
    </CardFooter>
</Card>


@code {
    private DetailsModel Details;

    [Parameter]
    public long Id { get; set; }

    private HistoryList historyList;
    private BpmnViewer modeler;

    [Parameter]
    public long TemplateId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Details = await Products.Get(Id);
        await modeler.SetValueAsync(Details.Template.Xml);
        await historyList.Reload();
        await SetColors(historyList.items);
    }

    private async Task ActionButtonClick(long actionId)
    {
        await Products.Execute(Id, actionId);
        Details = await Products.Get(Id);
        await historyList.Reload();
        await SetColors(historyList.items);
    }

    private async Task SetColors(List<Prodex.Shared.Models.Products.History.ListItemModel> list)
    {
        await modeler.SetColor("StartEvent_1", "#2eb85c");

        var colors = new Dictionary<string, string>();

        foreach (var i in list)
        {
            if(colors.TryGetValue(i.ActionId, out string color))
            {
                System.Drawing.Color colorIn = (System.Drawing.Color)new System.Drawing.ColorConverter().ConvertFromString(color);

                var col = ChangeColorBrightness(colorIn, -0.2f);

                string darkerHexColor = "#" + (col.ToArgb() & 0x00FFFFFF).ToString("X6");

                colors[i.ActionId] = darkerHexColor;
            }
            else
            {
                color = "#52BAE8";
                colors.Add(i.ActionId, color);
            }

            await modeler.SetColor(i.ActionId, colors[i.ActionId]);
        }
    }

    public static System.Drawing.Color ChangeColorBrightness(System.Drawing.Color color, float correctionFactor)
    {
        float red = (float)color.R;
        float green = (float)color.G;
        float blue = (float)color.B;

        if (correctionFactor < 0)
        {
            correctionFactor = 1 + correctionFactor;
            red /= correctionFactor;
            if (red > 255) red = 255;

            green *= correctionFactor;
            blue *= correctionFactor;
        }
        else
        {
            red = (255 - red) * correctionFactor + red;
            green = (255 - green) * correctionFactor + green;
            blue = (255 - blue) * correctionFactor + blue;
        }

        return System.Drawing.Color.FromArgb(color.A, (int)red, (int)green, (int)blue);
    }
}
