@using Prodex.Client.Pages.ProductTemplates.Models;
@using Prodex.Client.RestClients;
@using Prodex.Shared.Models.ProductTemplates.ElementOptions;
@using Prodex.Shared.Models.ProductTemplates.FieldsConfig;
@inject ProductTemplatesConfigsClient Service;

@if (HasOptions())
{
    <Div class="mt-3">

        <FormWrapper Form="Form">
            <Div Class="d-flex gap-2">

                <FormEnumSelect Property="p => p.LOperandType" OnValueChanged="StateHasChanged" />

                @switch (Form.LOperandType)
                {
                    case OperandType.Value:
                        <FormInput Property="p => p.Lvalue" />
                        break;

                    case OperandType.DynamicField:
                        <FormSelect Property="p => p.LdynamicField" AdditionalFilter="Filter" />
                        break;

                    case OperandType.DictionaryTerm:

                        <FormSelect Property="p => p.LDictionaryField" AdditionalFilter="Filter" />
                        break;

                    default:
                        <Div></Div>
                        break;
                }
            
                <FormEnumSelect Property="p => p.OperatorType" />

                <FormEnumSelect Property="p => p.ROperandType" OnValueChanged="StateHasChanged" />

                @switch (Form.ROperandType)
                {
                    case OperandType.Value:
                        <FormInput Property="p => p.Rvalue" />
                        break;

                    case OperandType.DynamicField:
                        <FormSelect Property="p => p.RdynamicField" AdditionalFilter="Filter" />
                        break;

                    case OperandType.DictionaryTerm:

                        <FormSelect Property="p => p.RDictionaryField" AdditionalFilter="Filter" />
                        break;

                    default:
                        <Div></Div>
                        break;
                }
            </Div>
        </FormWrapper>

        <Button Color="Color.Primary" Clicked="@Save">Zapisz konfigurację</Button>
    </Div>
}

@code {
    SequenceFlowConfigFormModel Form = new SequenceFlowConfigFormModel();
    private FilterModel Filter => new FilterModel { TemplateId = TemplateId };

    [Parameter]
    public BpmnElement Element { get; set; }

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public long TemplateId { get; set; }

    private FilterModel StatusFilter => new FilterModel { TemplateId = TemplateId };

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
        await base.OnParametersSetAsync();
    }

    private async Task LoadData()
    {
        Form = await Service.GetSequenceFlowConfig(TemplateId, Element.Id) ?? Form;
    }

    private async Task Save()
    {
        if (Form.Id.HasValue){
        await Service.UpdateSequenceFlowConfig(Form.Id.Value, Form);
        }
        else{
            await Service.CreateSequenceFlowConfig(TemplateId, Element.Id, Form);
        }

        await OnSave.InvokeAsync();

        await LoadData();
    }

    private bool HasOptions()
    {
        return Element?.SourceRef?.TypeEnum == ElementType.ExclusiveGateway;
    }
}
