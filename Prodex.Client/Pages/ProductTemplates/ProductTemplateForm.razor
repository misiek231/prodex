@page "/administration/product-template/form/{Id:long?}"
@using Prodex.Client.Coponents;
@using Prodex.Client.Coponents.Form;
@using Prodex.Client.Pages.ProductTemplates.Components;
@using Prodex.Client.Pages.ProductTemplates.Models;
@using Prodex.Client.RestClients;
@using Prodex.Shared.Models.ProductTemplates;
@using System.Net;
@using Prodex.Shared.Pagination;
@using Prodex.Shared.Utils;
@inject NavigationManager Navigation
@inject ProductTemplatesClient ProductsTemplates


<Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
    <Items>
        <Tab Name="basic">Informacje podstawowe</Tab>
        @if (Id.HasValue)
        {
            <Tab Name="statuses">Statusy</Tab>
            <Tab Name="actions">Akcje</Tab>
            <Tab Name="fields">Pola</Tab>
            <Tab Name="process">Proces</Tab>
        }
    </Items>
    <Content>
        <TabPanel Name="basic">
            <Card>
                <CardBody>
                    <FormWrapper Form="Form">
                        <FormInput Property="p => p.Name" />
                    </FormWrapper>
                </CardBody>
                <CardFooter>
                    <Button Color="Color.Primary" @onclick="Save">Zapisz</Button>
                </CardFooter>
            </Card>
        </TabPanel>
        @if (Id.HasValue)
        {
            <TabPanel Name="statuses">
                <StatusesList TemplateId="Id.Value"/>
            </TabPanel>
            <TabPanel Name="actions">
                Content for messages.
            </TabPanel>
            <TabPanel Name="fields">
                <FieldsConfigurator TemplateId="Id.Value"/>
            </TabPanel>
            <TabPanel Name="process">
                <ProcessDesigner @ref="designer" Save="Save" TemplateId="Id.Value"/>
            </TabPanel>
        }
    </Content>
</Tabs>

@code {
    private FormModel Form = new FormModel();
    string selectedTab = "basic";

    [Parameter]
    public long? Id { get; set; }

    private ProcessDesigner designer;

    protected override async Task OnInitializedAsync()
    {
        if (!Id.HasValue) return;

        Form = await ProductsTemplates.Get(Id.Value);
        await designer?.SetValueAsync(Form.ProcessXml);

        await base.OnInitializedAsync();
    }

    private async Task Save()
    {
        if (designer is not null)
            Form.ProcessXml = await designer.GetValueAsync();
        else
            Form.ProcessXml = "blank";

        var result = Id.HasValue ?
        await ProductsTemplates.Put(Id.Value, Form) :
        await ProductsTemplates.Post(Form);

        if (result.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("product-template");
        }
    }

    private Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;

        return Task.CompletedTask;
    }
}
